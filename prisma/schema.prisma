generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "scheme.md"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int       @id @default(autoincrement())
  uid              String    @unique
  isAdmin          Boolean   @default(false) @map("is_admin")
  photoURL         String?
  displayName      String?   @map("display_name")
  stripeCustomerId String?   @map("stripe_customer_id")
  university       String?
  faculty          String?
  department       String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  messages         Message[]
  products         Product[]
  matches          Match[]   @relation("MatchToUser")

  @@map("users")
}

model Product {
  id              Int        @id @default(autoincrement())
  stripePriceId   String     @map("stripe_price_id")
  stripeProductId String     @map("stripe_product_id")
  name            String
  price           Int
  active          Boolean
  description     String
  paymentMethod   String?    @map("payment_method")
  status          String
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  userId          Int        @map("user_id")
  images          Image[]
  matches         Match[]
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories      Category[] @relation("CategoryToProduct")

  @@index([userId])
  @@map("products")
}

model Image {
  id        Int     @id @default(autoincrement())
  name      String
  src       String
  productId Int     @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("images")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  products  Product[] @relation("CategoryToProduct")

  @@map("categories")
}

model Match {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  productId Int       @map("product_id")
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  messages  Message[]
  users     User[]    @relation("MatchToUser")

  @@map("matches")
}

model Message {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  matchId   Int      @map("match_id")
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([matchId])
  @@map("messages")
}
